// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Pokemon {
  id              Int    @id @unique
  name            String @unique @db.VarChar(255)
  japanese_name   String
  chinese_name    String
  french_name     String
  primary_type    Int
  secondary_type  Int?
  hp              Int
  attack          Int
  defense         Int
  special_attack  Int
  special_defense Int
  speed           Int

  // Relations
  primaryTypeRelation   Type  @relation("primary_type", fields: [primary_type], references: [id])
  secondaryTypeRelation Type? @relation("secondary_type", fields: [secondary_type], references: [id])

  @@index([name])
}

model Type {
  id                    Int       @id @default(autoincrement())
  type                  String
  // Relations
  primaryTypeRelation   Pokemon[] @relation("primary_type")
  secondaryTypeRelation Pokemon[] @relation("secondary_type")

  @@index([type])
}

// User Schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
